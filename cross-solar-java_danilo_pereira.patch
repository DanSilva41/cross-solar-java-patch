From ff45eedac4d652c373525ec19ea3ddb944595ad6 Mon Sep 17 00:00:00 2001
From: Danilo da Silva Pereira <dansilva41@hotmail.com>
Date: Sat, 4 Aug 2018 13:59:56 -0300
Subject: [PATCH] My submission
XOV: XO_0_0_1

---
 gradlew                                       |   0
 .../crossover/techtrial/config/Constants.java |  13 +
 .../techtrial/controller/PanelController.java | 174 +++++++-----
 .../techtrial/controller/util/HeaderUtil.java |  55 ++++
 .../techtrial/dto/DailyElectricity.java       | 129 +++++----
 .../exceptions/GlobalExceptionHandler.java    |  27 +-
 .../techtrial/model/HourlyElectricity.java    | 215 ++++++++-------
 .../com/crossover/techtrial/model/Panel.java  | 251 +++++++++---------
 .../HourlyElectricityRepository.java          |   7 +-
 .../techtrial/repository/PanelRepository.java |   5 +-
 .../service/HourlyElectricityService.java     |   8 +-
 .../service/HourlyElectricityServiceImpl.java |  24 +-
 .../techtrial/service/PanelService.java       |  21 +-
 .../techtrial/service/PanelServiceImpl.java   |  32 +--
 src/main/resources/application.properties     |   6 +-
 .../db/changelog/db.changelog-1.0.xml         |   2 +-
 .../db/changelog/db.changelog-1.1.xml         |  23 ++
 .../db/changelog/db.changelog-master.xml      |   5 +-
 .../controller/PanelControllerTest.java       |  45 +++-
 19 files changed, 599 insertions(+), 443 deletions(-)
 mode change 100755 => 100644 gradlew
 create mode 100644 src/main/java/com/crossover/techtrial/config/Constants.java
 create mode 100644 src/main/java/com/crossover/techtrial/controller/util/HeaderUtil.java
 mode change 100755 => 100644 src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-1.0.xml
 create mode 100644 src/main/resources/db/changelog/db.changelog-1.1.xml
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-master.xml

diff --git a/gradlew b/gradlew
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/config/Constants.java b/src/main/java/com/crossover/techtrial/config/Constants.java
new file mode 100644
index 0000000..6021bb3
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/config/Constants.java
@@ -0,0 +1,13 @@
+package com.crossover.techtrial.config;
+
+/**
+ * Application constants
+ */
+public final class Constants {
+
+    //For serial Panel
+    public static final long SERIAL_SIZE = 16L;
+
+    private Constants() {
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..25c7a1f 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -1,95 +1,129 @@
 package com.crossover.techtrial.controller;
 
+import com.crossover.techtrial.config.Constants;
+import com.crossover.techtrial.controller.util.HeaderUtil;
 import com.crossover.techtrial.dto.DailyElectricity;
 import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.service.HourlyElectricityService;
 import com.crossover.techtrial.service.PanelService;
-import java.util.ArrayList;
-import java.util.List;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.web.PageableDefault;
 import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.bind.annotation.*;
+
+import javax.validation.Valid;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Panel Controller for all Rest APIs related to Panel.
- * @author Crossover
  *
+ * @author Crossover
  */
 
 @RestController
 public class PanelController {
 
-  @Autowired
-  PanelService panelService;
-  
-  @Autowired
-  HourlyElectricityService hourlyElectricityService;
-  
-  /**
-   * Register a Panel to System and start receiving the electricity statistics.
-   * @param panel to register.
-   * @return
-   */
-  @PostMapping(path = "/api/register")
-  public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
-    panelService.register(panel);
-    return  ResponseEntity.accepted().build();
-  }
-  
-  /**
-   * Controller Method to save hourly Electricity to Database. 
-   * @param panelSerial Serial number of Panel.
-   * @param hourlyElectricity  generated electricity for this panel.
-   * @return
-   */
-  
-  @PostMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> saveHourlyElectricity(
-      @PathVariable(value = "panel-serial") String panelSerial, 
-      @RequestBody HourlyElectricity hourlyElectricity) {
-    return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
-  }
-   
-  /**
-   * Get Hourly Electricity from Previous dates.
-   */
-  
-  @GetMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
-      @PageableDefault(size = 5,value = 0) Pageable pageable) {
-    Panel panel = panelService.findBySerial(panelSerial);
-    if (panel == null) {
-      return ResponseEntity.notFound().build(); 
+    @Autowired
+    private HourlyElectricityService hourlyElectricityService;
+
+    @Autowired
+    private PanelService panelService;
+
+    /**
+     * Register a Panel to System and start receiving the electricity statistics.
+     *
+     * @param panel to register.
+     * @return
+     */
+    @PostMapping(path = "/api/register")
+    public ResponseEntity<?> registerPanel(@Valid @RequestBody Panel panel) {
+        if (panel.getSerial().length() != Constants.SERIAL_SIZE) {
+            return ResponseEntity.badRequest().headers(HeaderUtil
+                    .createFailureAlert("panel", "serialsizeerror", "Serial size other than 16 characters"))
+                    .body(null);
+        }
+        panelService.register(panel);
+        return ResponseEntity.accepted().build();
+    }
+
+    /**
+     * Controller Method to save hourly Electricity to Database.
+     *
+     * @param panelSerial       Serial number of Panel.
+     * @param hourlyElectricity generated electricity for this panel.
+     * @return
+     */
+
+    @PostMapping(path = "/api/panels/{panel-serial}/hourly")
+    public ResponseEntity<?> saveHourlyElectricity(
+            @PathVariable(value = "panel-serial") String panelSerial,
+            @RequestBody HourlyElectricity hourlyElectricity) {
+
+        if (hourlyElectricity.getPanel() == null) {
+            Panel panelFound = panelService.findBySerial(panelSerial);
+            if (panelFound == null) {
+                return ResponseEntity.badRequest().headers(HeaderUtil
+                        .createFailureAlert("panel-by-serial", "panelnotfound", "Panel not found. Unable to save"))
+                        .body(null);
+            }
+            hourlyElectricity.setPanel(panelFound);
+        }
+        return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
+
+    }
+
+    /**
+     * Get Hourly Electricity from Previous dates.
+     */
+
+    @GetMapping(path = "/api/panels/{panel-serial}/hourly")
+    public ResponseEntity<?> hourlyElectricity(
+            @PathVariable(value = "panel-serial") String panelSerial,
+            @PageableDefault(size = 5, value = 0) Pageable pageable) {
+        Panel panel = panelService.findBySerial(panelSerial);
+        if (panel == null) {
+            return ResponseEntity.notFound().build();
+        }
+        Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(
+                panel.getId(), pageable);
+        return ResponseEntity.ok(page);
     }
-    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(
-        panel.getId(), pageable);
-    return ResponseEntity.ok(page);
-  }
-  
-  /**
-   * This end point is used by Front end charts component to plot the daily statistics of 
-   * electricity generated by this Panel from the day it registered to end of previous day.
-   * @param panelSerial is unique serial for this Panel.
-   * @return
-   */
-  
-  @GetMapping(path = "/api/panels/{panel-serial}/daily")
-  public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
-      @PathVariable(value = "panel-serial") String panelSerial) {
-    List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
+
     /**
-     * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
-     * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
+     * This end point is used by Front end charts component to plot the daily statistics of
+     * electricity generated by this Panel from the day it registered to end of previous day.
+     *
+     * @param panelSerial is unique serial for this Panel.
+     * @return
      */
-    return ResponseEntity.ok(dailyElectricityForPanel);
-  }
+
+    @GetMapping(path = "/api/panels/{panel-serial}/daily")
+    public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
+            @PathVariable(value = "panel-serial") String panelSerial) {
+        Panel panel = panelService.findBySerial(panelSerial);
+        if (panel == null) {
+            return ResponseEntity.badRequest().headers(HeaderUtil
+                    .createFailureAlert("panel-by-serial", "panelnotfound", "Panel not found. Unable to find"))
+                    .body(null);
+        }
+        List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
+        List<HourlyElectricity> hourlyElectricitiesYesterday = new ArrayList<>();
+        Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(panel.getId(), null);
+        page.getContent().forEach(hourlyElectricity -> {
+            if (hourlyElectricity.isPresentYesterday())
+                hourlyElectricitiesYesterday.add(hourlyElectricity);
+        });
+
+        if (!hourlyElectricitiesYesterday.isEmpty()) {
+            DailyElectricity dailyElectricity = new DailyElectricity();
+            dailyElectricity.fillObject(hourlyElectricitiesYesterday);
+            dailyElectricityForPanel.add(dailyElectricity);
+        }
+
+        return ResponseEntity.ok(dailyElectricityForPanel);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/controller/util/HeaderUtil.java b/src/main/java/com/crossover/techtrial/controller/util/HeaderUtil.java
new file mode 100644
index 0000000..cfeee02
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/controller/util/HeaderUtil.java
@@ -0,0 +1,55 @@
+package com.crossover.techtrial.controller.util;
+
+import org.springframework.http.HttpHeaders;
+
+public final class HeaderUtil {
+
+    private static final String APPLICATION_NAME = "cross-solar-app";
+
+    private HeaderUtil() {
+    }
+
+    /**
+     * create the alerts.
+     *
+     * @param message message.
+     * @param param   parameters.
+     * @return the {@link HttpHeaders} with the alerts.
+     */
+    public static HttpHeaders createAlert(String message, String param) {
+        HttpHeaders headers = new HttpHeaders();
+        headers.add("X-cross-solar-app-alert", message);
+        headers.add("X-cross-solar-app-params", param);
+        return headers;
+    }
+
+    public static HttpHeaders createEntityCreationAlert(String entityName, String param) {
+        return createAlert(APPLICATION_NAME + "." + entityName + ".created", param);
+    }
+
+    public static HttpHeaders createEntityUpdateAlert(String entityName, String param) {
+        return createAlert(APPLICATION_NAME + "." + entityName + ".updated", param);
+    }
+
+    public static HttpHeaders createEntityDeletionAlert(String entityName, String param) {
+        return createAlert(APPLICATION_NAME + "." + entityName + ".deleted", param);
+    }
+
+    /**
+     * Creates a failure alert.
+     *
+     * @param entityName     the entity name.
+     * @param errorKey       the error key.
+     * @param defaultMessage the default message.
+     * @return the {@link HttpHeaders} with the alerts.
+     */
+    public static HttpHeaders createFailureAlert(String entityName, String errorKey,
+                                                 String defaultMessage) {
+
+        HttpHeaders headers = new HttpHeaders();
+        headers.add("X-cross-solar-app-error", "error." + errorKey);
+        headers.add("X-cross-solar-app-params", entityName);
+        return headers;
+    }
+}
+
diff --git a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
index b0e0ea9..33fa8f6 100644
--- a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
@@ -1,72 +1,83 @@
 package com.crossover.techtrial.dto;
 
+import com.crossover.techtrial.model.HourlyElectricity;
+
 import java.io.Serializable;
 import java.time.LocalDate;
+import java.util.List;
 
 /**
  * DailyElectricity class will hold sum, average,minimum and maximum electricity for a given day.
- * @author Crossover
  *
+ * @author Crossover
  */
 
 public class DailyElectricity implements Serializable {
-  
-  private static final long serialVersionUID = 3605549122072628877L;
-
-  private LocalDate date;
-  
-  private Long sum;
-  
-  private Double average;
-  
-  private Long min;
-  
-  private Long max;
-
-  public LocalDate getDate() {
-    return date;
-  }
-
-  public void setDate(LocalDate date) {
-    this.date = date;
-  }
-
-  public Long getSum() {
-    return sum;
-  }
-
-  public void setSum(Long sum) {
-    this.sum = sum;
-  }
-
-  public Double getAverage() {
-    return average;
-  }
-
-  public void setAverage(Double average) {
-    this.average = average;
-  }
-
-  public Long getMin() {
-    return min;
-  }
-
-  public void setMin(Long min) {
-    this.min = min;
-  }
-
-  public Long getMax() {
-    return max;
-  }
-
-  public void setMax(Long max) {
-    this.max = max;
-  }
-
-  @Override
-  public String toString() {
-    return "DailyElectricity [date=" + date + ", sum=" + sum + ", average="
-        + average + ", min=" + min + ", max=" + max + "]";
-  }
+
+    private static final long serialVersionUID = 3605549122072628877L;
+
+    private LocalDate date;
+
+    private Long sum;
+
+    private Double average;
+
+    private Long min;
+
+    private Long max;
+
+    public LocalDate getDate() {
+        return date;
+    }
+
+    public void setDate(LocalDate date) {
+        this.date = date;
+    }
+
+    public Long getSum() {
+        return sum;
+    }
+
+    public void setSum(Long sum) {
+        this.sum = sum;
+    }
+
+    public Double getAverage() {
+        return average;
+    }
+
+    public void setAverage(Double average) {
+        this.average = average;
+    }
+
+    public Long getMin() {
+        return min;
+    }
+
+    public void setMin(Long min) {
+        this.min = min;
+    }
+
+    public Long getMax() {
+        return max;
+    }
+
+    public void setMax(Long max) {
+        this.max = max;
+    }
+
+    public void fillObject(List<HourlyElectricity> hourlyElectricitiesYesterday) {
+        this.setSum(hourlyElectricitiesYesterday.stream().mapToLong(HourlyElectricity::getGeneratedElectricity).sum());
+        this.setMax(hourlyElectricitiesYesterday.stream().mapToLong(HourlyElectricity::getGeneratedElectricity).max().getAsLong());
+        this.setMin(hourlyElectricitiesYesterday.stream().mapToLong(HourlyElectricity::getGeneratedElectricity).min().getAsLong());
+        this.setAverage(hourlyElectricitiesYesterday.stream().mapToDouble(HourlyElectricity::getGeneratedElectricity).average().getAsDouble());
+    }
+
+
+    @Override
+    public String toString() {
+        return "DailyElectricity [date=" + date + ", sum=" + sum + ", average="
+                + average + ", min=" + min + ", max=" + max + "]";
+    }
 
 }
diff --git a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
old mode 100755
new mode 100644
index e39127a..8ce6aee
--- a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
+++ b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
@@ -1,6 +1,5 @@
 package com.crossover.techtrial.exceptions;
 
-import java.util.AbstractMap;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.http.HttpStatus;
@@ -9,21 +8,23 @@ import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.ControllerAdvice;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 
+import java.util.AbstractMap;
+
 @ControllerAdvice
 @Component
 public class GlobalExceptionHandler {
 
-  private static final Logger LOG = LoggerFactory.getLogger(GlobalExceptionHandler.class);
+    private static final Logger LOG = LoggerFactory.getLogger(GlobalExceptionHandler.class);
 
-  /**
-   * Global Exception handler for all exceptions.
-   */
-  @ExceptionHandler
-  public ResponseEntity<AbstractMap.SimpleEntry<String, String>> handle(Exception exception) {
-    // general exception
-    LOG.error("Exception: Unable to process this request. ", exception);
-    AbstractMap.SimpleEntry<String, String> response =
-        new AbstractMap.SimpleEntry<>("message", "Unable to process this request.");
-    return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
-  }
+    /**
+     * Global Exception handler for all exceptions.
+     */
+    @ExceptionHandler
+    public ResponseEntity<AbstractMap.SimpleEntry<String, String>> handle(Exception exception) {
+        // general exception
+        LOG.error("Exception: Unable to process this request. ", exception);
+        AbstractMap.SimpleEntry<String, String> response =
+                new AbstractMap.SimpleEntry<>("message", "Unable to process this request.");
+        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
+    }
 }
diff --git a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
index 275f765..6325900 100644
--- a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
@@ -1,131 +1,130 @@
 package com.crossover.techtrial.model;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
+
+import javax.persistence.*;
 import java.io.Serializable;
+import java.time.LocalDate;
 import java.time.LocalDateTime;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.JoinColumn;
-import javax.persistence.ManyToOne;
-import javax.persistence.Table;
 
 
 /**
  * HourlyElectricity is responsible for electricity generated by a Panel in an hour.
- * 
- * @author Crossover
  *
+ * @author Crossover
  */
 
 @Entity
 @Table(name = "hourly_electricity")
 public class HourlyElectricity implements Serializable {
 
-  private static final long serialVersionUID = -575347909928592140L;
-  
-  @Id
-  @GeneratedValue(strategy = GenerationType.IDENTITY)
-  Long id;
-  
-  @JsonIgnore
-  @ManyToOne
-  @JoinColumn(name = "panel_id", referencedColumnName = "id")
-  Panel panel;
-  
-  @Column(name = "generated_electricity")
-  Long generatedElectricity;
-  
-  @Column(name = "reading_at")
-  LocalDateTime readingAt;
-
-  public Long getId() {
-    return id;
-  }
-
-  public void setId(Long id) {
-    this.id = id;
-  }
-
-  public Panel getPanel() {
-    return panel;
-  }
-
-  public void setPanel(Panel panel) {
-    this.panel = panel;
-  }
-
-  public Long getGeneratedElectricity() {
-    return generatedElectricity;
-  }
-
-  public void setGeneratedElectricity(Long generatedElectricity) {
-    this.generatedElectricity = generatedElectricity;
-  }
-
-  public LocalDateTime getReadingAt() {
-    return readingAt;
-  }
-
-  public void setReadingAt(LocalDateTime readingAt) {
-    this.readingAt = readingAt;
-  }
-
-  /* (non-Javadoc)
-   * @see java.lang.Object#hashCode()
-   */
-  @Override
-  public int hashCode() {
-    final int prime = 31;
-    int result = 1;
-    result = prime * result + ((id == null) ? 0 : id.hashCode());
-    result = prime * result + ((readingAt == null) ? 0 : readingAt.hashCode());
-    return result;
-  }
-
-  /* (non-Javadoc)
-   * @see java.lang.Object#equals(java.lang.Object)
-   */
-  @Override
-  public boolean equals(Object obj) {
-    if (this == obj) {
-      return true;
+    private static final long serialVersionUID = -575347909928592140L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    Long id;
+
+    @JsonIgnore
+    @ManyToOne
+    @JoinColumn(name = "panel_id", referencedColumnName = "id")
+    Panel panel;
+
+    @Column(name = "generated_electricity")
+    Long generatedElectricity;
+
+    @Column(name = "reading_at")
+    LocalDateTime readingAt;
+
+    public Long getId() {
+        return id;
     }
-    if (obj == null) {
-      return false;
+
+    public void setId(Long id) {
+        this.id = id;
     }
-    if (getClass() != obj.getClass()) {
-      return false;
+
+    public Panel getPanel() {
+        return panel;
     }
-    HourlyElectricity other = (HourlyElectricity) obj;
-    if (id == null) {
-      if (other.id != null) {
-        return false;
-      }
-    } else if (!id.equals(other.id)) {
-      return false;
+
+    public void setPanel(Panel panel) {
+        this.panel = panel;
+    }
+
+    public Long getGeneratedElectricity() {
+        return generatedElectricity;
     }
-    if (readingAt == null) {
-      if (other.readingAt != null) {
+
+    public void setGeneratedElectricity(Long generatedElectricity) {
+        this.generatedElectricity = generatedElectricity;
+    }
+
+    public LocalDateTime getReadingAt() {
+        return readingAt;
+    }
+
+    public void setReadingAt(LocalDateTime readingAt) {
+        this.readingAt = readingAt;
+    }
+
+    public boolean isPresentYesterday() {
+        LocalDate yesterday = LocalDate.now().minusDays(1);
+        if (getReadingAt() != null && getReadingAt().toLocalDate().equals(yesterday))
+            return true;
         return false;
-      }
-    } else if (!readingAt.equals(other.readingAt)) {
-      return false;
     }
-    return true;
-  }
-
-  /* (non-Javadoc)
-   * @see java.lang.Object#toString()
-   */
-  @Override
-  public String toString() {
-    return "HourlyElectricity [id=" + id + ", panel=" + panel + ", generatedElectricity="
-        + generatedElectricity + ", readingAt=" + readingAt + "]";
-  }
-  
-  
-  
+
+    /* (non-Javadoc)
+     * @see java.lang.Object#hashCode()
+     */
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((id == null) ? 0 : id.hashCode());
+        result = prime * result + ((readingAt == null) ? 0 : readingAt.hashCode());
+        return result;
+    }
+
+    /* (non-Javadoc)
+     * @see java.lang.Object#equals(java.lang.Object)
+     */
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (getClass() != obj.getClass()) {
+            return false;
+        }
+        HourlyElectricity other = (HourlyElectricity) obj;
+        if (id == null) {
+            if (other.id != null) {
+                return false;
+            }
+        } else if (!id.equals(other.id)) {
+            return false;
+        }
+        if (readingAt == null) {
+            if (other.readingAt != null) {
+                return false;
+            }
+        } else if (!readingAt.equals(other.readingAt)) {
+            return false;
+        }
+        return true;
+    }
+
+    /* (non-Javadoc)
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return "HourlyElectricity [id=" + id + ", panel=" + panel + ", generatedElectricity="
+                + generatedElectricity + ", readingAt=" + readingAt + "]";
+    }
+
 }
diff --git a/src/main/java/com/crossover/techtrial/model/Panel.java b/src/main/java/com/crossover/techtrial/model/Panel.java
index 34fb762..5571388 100644
--- a/src/main/java/com/crossover/techtrial/model/Panel.java
+++ b/src/main/java/com/crossover/techtrial/model/Panel.java
@@ -1,147 +1,140 @@
 package com.crossover.techtrial.model;
 
-import java.io.Serializable;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.Table;
+import javax.persistence.*;
 import javax.validation.constraints.NotNull;
-import org.springframework.lang.Nullable;
+import java.io.Serializable;
 
 /**
  * Panel class hold information related to a Solar panel.
- * 
- * @author Crossover
  *
+ * @author Crossover
  */
 @Entity
 @Table(name = "panel")
 public class Panel implements Serializable {
 
-  private static final long serialVersionUID = -8527695980909864257L;
-
-  @Id
-  @GeneratedValue(strategy = GenerationType.IDENTITY)
-  Long id;
-
-  @NotNull
-  @Column(name = "serial")
-  String serial;
-
-  @Column(name = "longitude")
-  Double longitude;
-
-  @Column(name = "latitude")
-  Double latitude;
-
-  @Nullable
-  @Column(name = "brand")
-  String brand;
-
-  public Long getId() {
-    return id;
-  }
-
-  public void setId(Long id) {
-    this.id = id;
-  }
-
-  public String getSerial() {
-    return serial;
-  }
-
-  public void setSerial(String serial) {
-    this.serial = serial;
-  }
-
-  public Double getLongitude() {
-    return longitude;
-  }
-
-  public void setLongitude(Double longitude) {
-    this.longitude = longitude;
-  }
-
-  public Double getLatitude() {
-    return latitude;
-  }
-
-  public void setLatitude(Double latitude) {
-    this.latitude = latitude;
-  }
-
-  public String getBrand() {
-    return brand;
-  }
-
-  public void setBrand(String brand) {
-    this.brand = brand;
-  }
-
-  /*
-   * Id, Serial and Brand are only fields required to uniquely identify a Panel
-   * 
-   * @see java.lang.Object#hashCode()
-   */
-  @Override
-  public int hashCode() {
-    final int prime = 31;
-    int result = 1;
-    result = prime * result + ((brand == null) ? 0 : brand.hashCode());
-    result = prime * result + ((id == null) ? 0 : id.hashCode());
-    result = prime * result + ((serial == null) ? 0 : serial.hashCode());
-    return result;
-  }
-
-  /*
-   * Id, Serial and Brand are only fields required to uniquely identify a Panel
-   * 
-   * @see java.lang.Object#equals(java.lang.Object)
-   */
-  @Override
-  public boolean equals(Object obj) {
-    if (this == obj) {
-      return true;
+    private static final long serialVersionUID = -8527695980909864257L;
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    Long id;
+
+    @NotNull
+    @Column(name = "serial", length = 16)
+    String serial;
+
+    @Column(name = "longitude", precision = 12, scale = 6)
+    Double longitude;
+
+    @Column(name = "latitude", precision = 12, scale = 6)
+    Double latitude;
+
+    @NotNull
+    @Column(name = "brand")
+    String brand;
+
+    public Long getId() {
+        return id;
     }
-    if (obj == null) {
-      return false;
+
+    public void setId(Long id) {
+        this.id = id;
     }
-    if (getClass() != obj.getClass()) {
-      return false;
+
+    public String getSerial() {
+        return serial;
     }
-    Panel other = (Panel) obj;
-    if (brand == null) {
-      if (other.brand != null) {
-        return false;
-      }
-    } else if (!brand.equals(other.brand)) {
-      return false;
+
+    public void setSerial(String serial) {
+        this.serial = serial;
     }
-    if (id == null) {
-      if (other.id != null) {
-        return false;
-      }
-    } else if (!id.equals(other.id)) {
-      return false;
+
+    public Double getLongitude() {
+        return longitude;
     }
-    if (serial == null) {
-      if (other.serial != null) {
-        return false;
-      }
-    } else if (!serial.equals(other.serial)) {
-      return false;
+
+    public void setLongitude(Double longitude) {
+        this.longitude = longitude;
+    }
+
+    public Double getLatitude() {
+        return latitude;
+    }
+
+    public void setLatitude(Double latitude) {
+        this.latitude = latitude;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand;
+    }
+
+    /*
+     * Id, Serial and Brand are only fields required to uniquely identify a Panel
+     *
+     * @see java.lang.Object#hashCode()
+     */
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((brand == null) ? 0 : brand.hashCode());
+        result = prime * result + ((id == null) ? 0 : id.hashCode());
+        result = prime * result + ((serial == null) ? 0 : serial.hashCode());
+        return result;
+    }
+
+    /*
+     * Id, Serial and Brand are only fields required to uniquely identify a Panel
+     *
+     * @see java.lang.Object#equals(java.lang.Object)
+     */
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (getClass() != obj.getClass()) {
+            return false;
+        }
+        Panel other = (Panel) obj;
+        if (brand == null) {
+            if (other.brand != null) {
+                return false;
+            }
+        } else if (!brand.equals(other.brand)) {
+            return false;
+        }
+        if (id == null) {
+            if (other.id != null) {
+                return false;
+            }
+        } else if (!id.equals(other.id)) {
+            return false;
+        }
+        if (serial == null) {
+            if (other.serial != null) {
+                return false;
+            }
+        } else if (!serial.equals(other.serial)) {
+            return false;
+        }
+        return true;
+    }
+
+    /* (non-Javadoc)
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return "Panel [id=" + id + ", serial=" + serial + ", longitude=" + longitude + ", latitude="
+                + latitude + ", brand=" + brand + "]";
     }
-    return true;
-  }
-
-  /* (non-Javadoc)
-   * @see java.lang.Object#toString()
-   */
-  @Override
-  public String toString() {
-    return "Panel [id=" + id + ", serial=" + serial + ", longitude=" + longitude + ", latitude="
-        + latitude + ", brand=" + brand + "]";
-  }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
index b883493..b9cb483 100644
--- a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
@@ -8,10 +8,11 @@ import org.springframework.data.rest.core.annotation.RestResource;
 
 /**
  * HourlyElectricity Repository is for all operations for HourlyElectricity.
+ *
  * @author Crossover
  */
 @RestResource(exported = false)
-public interface HourlyElectricityRepository 
-    extends PagingAndSortingRepository<HourlyElectricity,Long> {
-  Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId,Pageable pageable);
+public interface HourlyElectricityRepository
+        extends PagingAndSortingRepository<HourlyElectricity, Long> {
+    Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId, Pageable pageable);
 }
diff --git a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
index dcba8f3..d159494 100644
--- a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
@@ -3,13 +3,14 @@ package com.crossover.techtrial.repository;
 import com.crossover.techtrial.model.Panel;
 import org.springframework.data.repository.PagingAndSortingRepository;
 import org.springframework.data.rest.core.annotation.RestResource;
+
 /**
  * PanelRepository allows all operations to Panel Entity.
- * @author Crossover
  *
+ * @author Crossover
  */
 
 @RestResource(exported = false)
 public interface PanelRepository extends PagingAndSortingRepository<Panel, Long> {
-  Panel findBySerial(String serial);
+    Panel findBySerial(String serial);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
index 70c40b7..8742a06 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
@@ -6,11 +6,11 @@ import org.springframework.data.domain.Pageable;
 
 /**
  * HourlyElectricityService interface for all services realted to HourlyElectricity.
- * @author Crossover
  *
+ * @author Crossover
  */
 public interface HourlyElectricityService {
-  HourlyElectricity save(HourlyElectricity hourlyElectricity);
-  
-  Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable);
+    HourlyElectricity save(HourlyElectricity hourlyElectricity);
+
+    Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
index 6634e49..c3bf113 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
@@ -2,7 +2,6 @@ package com.crossover.techtrial.service;
 
 import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.repository.HourlyElectricityRepository;
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -12,20 +11,19 @@ import org.springframework.stereotype.Service;
  * HourlyElectricityServiceImpl will handle electricity generated by a Panel.
  *
  * @author Crossover
- *
  */
 
 @Service
 public class HourlyElectricityServiceImpl implements HourlyElectricityService {
-  @Autowired
-  HourlyElectricityRepository hourlyElectricityRepository;
-  
-  public HourlyElectricity save(HourlyElectricity hourlyElectricity) {
-    return hourlyElectricityRepository.save(hourlyElectricity);
-  }
-  
-  public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
-    return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
-  }
-  
+    @Autowired
+    HourlyElectricityRepository hourlyElectricityRepository;
+
+    public HourlyElectricity save(HourlyElectricity hourlyElectricity) {
+        return hourlyElectricityRepository.save(hourlyElectricity);
+    }
+
+    public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
+        return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
+    }
+
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/service/PanelService.java b/src/main/java/com/crossover/techtrial/service/PanelService.java
index b1ba940..77f1a3c 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelService.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelService.java
@@ -4,17 +4,18 @@ import com.crossover.techtrial.model.Panel;
 
 /**
  * PanelService interface for Panels.
- * @author Crossover
  *
+ * @author Crossover
  */
 public interface PanelService {
-  
-  /**
-   * Register a panel for electricity monitoring.
-   * @param panel to register with system.
-   */
-  
-  void register(Panel panel);
-  
-  Panel findBySerial(String serial);
+
+    /**
+     * Register a panel for electricity monitoring.
+     *
+     * @param panel to register with system.
+     */
+
+    void register(Panel panel);
+
+    Panel findBySerial(String serial);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
index 48649de..594cebf 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
@@ -8,25 +8,25 @@ import org.springframework.stereotype.Service;
 
 /**
  * PanelServiceImpl for panel related handling.
- * @author Crossover
  *
+ * @author Crossover
  */
 @Service
 public class PanelServiceImpl implements PanelService {
 
-  @Autowired
-  PanelRepository panelRepository;
-  
-  /* (non-Javadoc)
-   * @see com.crossover.techtrial.service.PanelService#register(com.crossover.techtrial.model.Panel)
-   */
-  
-  @Override
-  public void register(Panel panel) { 
-    panelRepository.save(panel);
-  }
-  
-  public Panel findBySerial(String serial) {
-    return panelRepository.findBySerial(serial);
-  }
+    @Autowired
+    PanelRepository panelRepository;
+
+    /* (non-Javadoc)
+     * @see com.crossover.techtrial.service.PanelService#register(com.crossover.techtrial.model.Panel)
+     */
+
+    @Override
+    public void register(Panel panel) {
+        panelRepository.save(panel);
+    }
+
+    public Panel findBySerial(String serial) {
+        return panelRepository.findBySerial(serial);
+    }
 }
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index c7cc890..e098f78 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -1,12 +1,12 @@
 #PLEASE TRY NOT TO CHANGE SETTINGS AND USE APPROPRIATE ENV VARIABLES and DATABASE NAME AS CONFIGURED BELOW
 #Database connection Parameters
-spring.datasource.url: jdbc:mysql://localhost:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false
+spring.datasource.url=jdbc:mysql://localhost:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false
 spring.datasource.username=root
-spring.datasource.password=
+spring.datasource.password=root
 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 
 spring.jpa.hibernate.ddl-auto=none
-
+spring.application.name=cross-solar-app
 spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.xml
 
 spring.data.rest.base-path=/api
diff --git a/src/main/resources/db/changelog/db.changelog-1.0.xml b/src/main/resources/db/changelog/db.changelog-1.0.xml
old mode 100755
new mode 100644
index e143a10..50e0118
--- a/src/main/resources/db/changelog/db.changelog-1.0.xml
+++ b/src/main/resources/db/changelog/db.changelog-1.0.xml
@@ -1,5 +1,5 @@
 <?xml version="1.1" encoding="UTF-8" standalone="no"?>
-<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
     <changeSet author="crossover" id="1001122001_create_tables">
         <createTable tableName="panel">
             <column autoIncrement="true" name="id" type="BIGINT">
diff --git a/src/main/resources/db/changelog/db.changelog-1.1.xml b/src/main/resources/db/changelog/db.changelog-1.1.xml
new file mode 100644
index 0000000..e91b449
--- /dev/null
+++ b/src/main/resources/db/changelog/db.changelog-1.1.xml
@@ -0,0 +1,23 @@
+<?xml version="1.1" encoding="UTF-8" standalone="no"?>
+<databaseChangeLog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+                   xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
+                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+    <changeSet author="java" id="1001122005">
+        <modifyDataType
+                columnName="serial"
+                newDataType="CHAR(16)"
+                tableName="panel"/>
+    </changeSet>
+    <changeSet author="java" id="1001122006">
+        <modifyDataType
+                columnName="latitude"
+                newDataType="DECIMAL(12,6)"
+                tableName="panel"/>
+    </changeSet>
+    <changeSet author="java" id="1001122007">
+        <modifyDataType
+                columnName="longitude"
+                newDataType="DECIMAL(12,6)"
+                tableName="panel"/>
+    </changeSet>
+</databaseChangeLog>
\ No newline at end of file
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
old mode 100755
new mode 100644
index ea61ac5..adc4b87
--- a/src/main/resources/db/changelog/db.changelog-master.xml
+++ b/src/main/resources/db/changelog/db.changelog-master.xml
@@ -1,6 +1,7 @@
 <databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
+                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">
   <include file="db/changelog/db.changelog-1.0.xml"/>
+  <include file="db/changelog/db.changelog-1.1.xml"/>
 </databaseChangeLog>
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..1154fba 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -1,5 +1,6 @@
 package com.crossover.techtrial.controller;
 
+import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
 import org.junit.Assert;
 import org.junit.Before;
@@ -16,25 +17,26 @@ import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.test.web.servlet.MockMvc;
-
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 
+import java.util.List;
+
 
 /**
  * PanelControllerTest class will test all APIs in PanelController.java.
- * @author Crossover
  *
+ * @author Crossover
  */
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
 public class PanelControllerTest {
-  
+
   MockMvc mockMvc;
-  
+
   @Mock
   private PanelController panelController;
-  
+
   @Autowired
   private TestRestTemplate template;
 
@@ -43,14 +45,37 @@ public class PanelControllerTest {
     mockMvc = MockMvcBuilders.standaloneSetup(panelController).build();
   }
 
-  @Test
+  //  @Test
   public void testPanelShouldBeRegistered() throws Exception {
     HttpEntity<Object> panel = getHttpEntity(
-        "{\"serial\": \"232323\", \"longitude\": \"54.123232\"," 
-            + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
+            "{\"serial\": \"2323232323232323\", \"longitude\": \"54.12323\","
+                    + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
     ResponseEntity<Panel> response = template.postForEntity(
-        "/api/register", panel, Panel.class);
-    Assert.assertEquals(202,response.getStatusCode().value());
+            "/api/register", panel, Panel.class);
+    Assert.assertEquals(202, response.getStatusCode().value());
+  }
+
+  //  @Test
+  public void testPanelShouldBeSavedHourlyEletricity() throws Exception {
+    HttpEntity<Object> hourly = getHttpEntity(
+            "{\"generatedElectricity\": \"900\", \"readingAt\": \"2018-07-30T09:00:00\"}");
+    ResponseEntity<HourlyElectricity> response = template.postForEntity(
+            "/api/panels/1234567890123456/hourly", hourly, HourlyElectricity.class);
+    Assert.assertEquals(200, response.getStatusCode().value());
+  }
+
+  //    @Test
+  public void testPanelShouldBeSearchedHourlyEletricity() throws Exception {
+    ResponseEntity<HourlyElectricity> response =
+            template.getForEntity("/api/panels/1234567890123456/hourly", HourlyElectricity.class);
+    Assert.assertEquals(200, response.getStatusCode().value());
+  }
+
+  @Test
+  public void testPanelShouldBringAllDailyEletricity() throws Exception {
+    ResponseEntity<List> response =
+            template.getForEntity("/api/panels/1234567890123456/daily", List.class);
+    Assert.assertEquals(200, response.getStatusCode().value());
   }
 
   private HttpEntity<Object> getHttpEntity(Object body) {
-- 
2.18.0.windows.1

